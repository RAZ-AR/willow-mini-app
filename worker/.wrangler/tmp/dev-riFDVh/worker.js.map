{
  "version": 3,
  "sources": ["../bundle-xbbWlV/checked-fetch.js", "../../../src/worker.js", "../../../../../../../../../opt/homebrew/Cellar/node@22/22.11.0/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../../../../opt/homebrew/Cellar/node@22/22.11.0/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-xbbWlV/middleware-insertion-facade.js", "../../../../../../../../../opt/homebrew/Cellar/node@22/22.11.0/lib/node_modules/wrangler/templates/middleware/common.ts", "../bundle-xbbWlV/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/bari/Documents/GitHub/Willow Bot/worker/.wrangler/tmp/dev-riFDVh",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// src/worker.js\n\nconst CORS_ORIGIN = 'https://raz-ar.github.io';\nconst MENU_CACHE_TTL_SECONDS = 60;\n\n// In-memory cache for the menu\nlet menuCache = {\n\tupdated_at: null,\n\tdata: null,\n};\n\n/**\n * Simple router for handling requests.\n */\nclass Router {\n\tconstructor() {\n\t\tthis.routes = [];\n\t}\n\n\tadd(method, path, handler) {\n\t\tthis.routes.push({ method, path, handler });\n\t\treturn this;\n\t}\n\n\tasync route(request, env, ctx) {\n\t\tconst url = new URL(request.url);\n\t\tfor (const route of this.routes) {\n\t\t\tif (request.method === route.method && url.pathname === route.path) {\n\t\t\t\treturn await route.handler(request, env, ctx);\n\t\t\t}\n\t\t}\n\t\treturn new Response('Not Found', { status: 404 });\n\t}\n}\n\n// =================================================================================\n// API Handlers\n// =================================================================================\n\n/**\n * GET /api/menu\n * Fetches the menu from a Google Sheet, normalizes it, and caches it.\n */\nasync function handleGetMenu(request, env) {\n\tconst now = Date.now();\n\tif (menuCache.updated_at && (now - menuCache.updated_at) / 1000 < MENU_CACHE_TTL_SECONDS) {\n\t\treturn jsonResponse(menuCache.data, { 'Cache-Control': `public, max-age=${MENU_CACHE_TTL_SECONDS}` });\n\t}\n\n\ttry {\n\t\tconst response = await fetch(env.SHEETS_CSV_URL);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`Failed to fetch CSV: ${response.statusText}`);\n\t\t}\n\t\tconst csvText = await response.text();\n\t\tconst parsedMenu = parseMenuFromCsv(csvText);\n\n\t\tmenuCache = {\n\t\t\tupdated_at: now,\n\t\t\tdata: parsedMenu,\n\t\t};\n\n\t\treturn jsonResponse(parsedMenu, { 'Cache-Control': `public, max-age=${MENU_CACHE_TTL_SECONDS}` });\n\t} catch (error) {\n\t\tconsole.error('Error fetching/parsing menu:', error);\n\t\treturn jsonResponse({ error: 'Could not fetch menu' }, { status: 500 });\n\t}\n}\n\n/**\n * POST /api/auth/telegram\n * Validates Telegram initData and returns user profile.\n */\nasync function handleAuth(request, env) {\n\tconst { initData } = await request.json();\n\tif (!initData) {\n\t\treturn jsonResponse({ error: 'initData is required' }, { status: 400 });\n\t}\n\n\tconst isValid = await isValidTelegramInitData(initData, env.BOT_TOKEN);\n\tif (!isValid) {\n\t\treturn jsonResponse({ error: 'Invalid initData' }, { status: 403 });\n\t}\n\n\tconst params = new URLSearchParams(initData);\n\tconst user = JSON.parse(params.get('user'));\n\n\tlet dbUser = await env.DB.prepare('SELECT * FROM users WHERE telegram_id = ?').bind(user.id).first();\n\n\tif (!dbUser) {\n\t\tconst card_number = await generateUniqueCardNumber(env.DB);\n\t\tconst { results } = await env.DB.prepare(\n\t\t\t'INSERT INTO users (telegram_id, first_name, last_name, username, language_code, card_number) VALUES (?, ?, ?, ?, ?, ?) RETURNING *'\n\t\t)\n\t\t\t.bind(user.id, user.first_name, user.last_name || null, user.username || null, user.language_code || 'en', card_number)\n\t\t\t.run();\n\t\tdbUser = results.length > 0 ? results[0] : null;\n\t}\n\n\treturn jsonResponse(dbUser);\n}\n\n/**\n * POST /api/order\n * Creates a new order.\n */\nasync function handleCreateOrder(request, env) {\n\tconst { initData, items, eta_minutes } = await request.json();\n\n\tif (!initData || !items || !eta_minutes || !Array.isArray(items) || items.length === 0) {\n\t\treturn jsonResponse({ error: 'Missing required fields' }, { status: 400 });\n\t}\n\tif (![10, 20, 30].includes(eta_minutes)) {\n\t\treturn jsonResponse({ error: 'Invalid ETA' }, { status: 400 });\n\t}\n\n\tconst isValid = await isValidTelegramInitData(initData, env.BOT_TOKEN);\n\tif (!isValid) {\n\t\treturn jsonResponse({ error: 'Invalid initData' }, { status: 403 });\n\t}\n\n\tconst params = new URLSearchParams(initData);\n\tconst user = JSON.parse(params.get('user'));\n\n\t// Fetch fresh menu data (from cache or source)\n\tawait handleGetMenu(request, env);\n\tconst menu = menuCache.data;\n\tif (!menu || !menu.items) {\n\t\treturn jsonResponse({ error: 'Menu is currently unavailable' }, { status: 503 });\n\t}\n\n\tconst { total_amount, validatedItems } = calculateOrderTotal(items, menu.items);\n\tif (total_amount === 0) {\n\t\treturn jsonResponse({ error: 'Invalid items or quantities' }, { status: 400 });\n\t}\n\n\tconst stars_added = Math.ceil(total_amount / 350);\n\tconst order_id = crypto.randomUUID();\n    const short_id = order_id.split('-')[0].toUpperCase();\n\tconst due_at = new Date(Date.now() + eta_minutes * 60 * 1000).toISOString();\n\n\t// DB Operations\n\tconst batch = [\n\t\tenv.DB.prepare(\n\t\t\t'INSERT INTO orders (id, short_id, user_id, total_amount, stars_added, eta_minutes, due_at) VALUES (?, ?, ?, ?, ?, ?, ?)'\n\t\t).bind(order_id, short_id, user.id, total_amount, stars_added, eta_minutes, due_at),\n\t\tenv.DB.prepare('UPDATE users SET stars = stars + ? WHERE telegram_id = ?').bind(stars_added, user.id),\n\t\tenv.DB.prepare(\n\t\t\t'INSERT INTO transactions (id, user_id, type, stars_change, order_id, description) VALUES (?, ?, ?, ?, ?, ?)'\n\t\t).bind(crypto.randomUUID(), user.id, 'accrual', stars_added, order_id, `Order ${short_id}`),\n\t\t...validatedItems.map(item =>\n\t\t\tenv.DB.prepare('INSERT INTO order_items (id, order_id, item_id, quantity, unit_price) VALUES (?, ?, ?, ?, ?)').bind(\n\t\t\t\tcrypto.randomUUID(),\n\t\t\t\torder_id,\n\t\t\t\titem.id,\n\t\t\t\titem.quantity,\n\t\t\t\titem.unit_price\n\t\t\t)\n\t\t),\n\t];\n\tawait env.DB.batch(batch);\n\n\tconst dbUser = await env.DB.prepare('SELECT * FROM users WHERE telegram_id = ?').bind(user.id).first();\n\n\t// Notify admin channel\n\tawait notifyAdminChannel(env, {\n\t\torder_id,\n\t\tshort_id,\n\t\tuser,\n\t\teta_minutes,\n\t\tdue_at,\n\t\ttotal_amount,\n\t\tstars_added,\n\t\titems: validatedItems,\n\t\tmenuItems: menu.items,\n\t});\n\n\treturn jsonResponse({\n\t\tok: true,\n\t\torder_id,\n\t\tdue_at,\n\t\teta_minutes,\n\t\ttotal_amount,\n\t\tstars_added,\n\t\tnew_stars: dbUser.stars,\n\t});\n}\n\n/**\n * POST /api/redeem\n * Redeems a reward for stars.\n */\nasync function handleRedeem(request, env) {\n    const { telegram_id, rewardKey } = await request.json();\n    if (!telegram_id || !rewardKey) {\n        return jsonResponse({ error: 'Missing required fields' }, { status: 400 });\n    }\n\n    const reward = await env.DB.prepare('SELECT * FROM rewards WHERE key = ?').bind(rewardKey).first();\n    if (!reward) {\n        return jsonResponse({ error: 'Invalid reward key' }, { status: 400 });\n    }\n\n    const user = await env.DB.prepare('SELECT * FROM users WHERE telegram_id = ?').bind(telegram_id).first();\n    if (!user) {\n        return jsonResponse({ error: 'User not found' }, { status: 404 });\n    }\n\n    if (user.stars < reward.stars_cost) {\n        return jsonResponse({ error: 'NOT_ENOUGH_STARS' }, { status: 400 });\n    }\n\n    const new_total = user.stars - reward.stars_cost;\n\n    const batch = [\n        env.DB.prepare('UPDATE users SET stars = ? WHERE telegram_id = ?').bind(new_total, telegram_id),\n        env.DB.prepare('INSERT INTO transactions (id, user_id, type, stars_change, reward_key, description) VALUES (?, ?, ?, ?, ?, ?)')\n            .bind(crypto.randomUUID(), telegram_id, 'redeem', -reward.stars_cost, rewardKey, `Redeemed ${reward.title}`)\n    ];\n    await env.DB.batch(batch);\n\n    return jsonResponse({ ok: true, new_total });\n}\n\n\n/**\n * POST /api/admin/accrue\n * Admin endpoint to add stars or accrue from an amount.\n */\nasync function handleAdminAccrue(request, env) {\n\tconst authHeader = request.headers.get('Authorization');\n\tif (!authHeader || authHeader !== `Bearer ${env.ADMIN_BEARER}`) {\n\t\treturn jsonResponse({ error: 'Unauthorized' }, { status: 401 });\n\t}\n\n\tconst { by, id, amount, stars } = await request.json();\n\tif (!by || !id || (!amount && !stars)) {\n\t\treturn jsonResponse({ error: 'Missing params' }, { status: 400 });\n\t}\n\n\tlet user;\n\tif (by === 'card') {\n\t\tuser = await env.DB.prepare('SELECT * FROM users WHERE card_number = ?').bind(id).first();\n\t} else if (by === 'username') {\n\t\tuser = await env.DB.prepare('SELECT * FROM users WHERE username = ?').bind(id).first();\n\t} else if (by === 'telegram_id') {\n\t\tuser = await env.DB.prepare('SELECT * FROM users WHERE telegram_id = ?').bind(id).first();\n\t} else {\n\t\treturn jsonResponse({ error: \"Invalid 'by' parameter\" }, { status: 400 });\n\t}\n\n\tif (!user) {\n\t\treturn jsonResponse({ error: 'User not found' }, { status: 404 });\n\t}\n\n\tconst stars_to_add = stars ? parseInt(stars, 10) : Math.ceil(parseInt(amount, 10) / 350);\n\tconst description = stars ? `Admin manual add: ${stars} stars` : `Admin amount accrual: ${amount} RSD`;\n\n\tawait env.DB.batch([\n\t\tenv.DB.prepare('UPDATE users SET stars = stars + ? WHERE telegram_id = ?').bind(stars_to_add, user.telegram_id),\n\t\tenv.DB.prepare('INSERT INTO transactions (id, user_id, type, stars_change, description) VALUES (?, ?, ?, ?, ?)').bind(\n\t\t\tcrypto.randomUUID(),\n\t\t\tuser.telegram_id,\n\t\t\t'accrual',\n\t\t\tstars_to_add,\n\t\t\tdescription\n\t\t),\n\t]);\n\n\tconst updatedUser = await env.DB.prepare('SELECT * FROM users WHERE telegram_id = ?').bind(user.telegram_id).first();\n\n\treturn jsonResponse({ ok: true, user: updatedUser });\n}\n\n/**\n * POST /tg/webhook\n * Handles incoming updates from the Telegram bot.\n */\nasync function handleWebhook(request, env) {\n\tconst update = await request.json();\n\n\tif (update.message) {\n\t\tawait handleMessage(update.message, env);\n\t} else if (update.channel_post) {\n\t\tawait handleChannelPost(update.channel_post, env);\n\t} else if (update.callback_query) {\n\t\tawait handleCallbackQuery(update.callback_query, env);\n\t}\n\n\treturn new Response('OK');\n}\n\n// =================================================================================\n// Telegram Webhook Handlers\n// =================================================================================\n\nasync function handleMessage(message, env) {\n\tconst text = message.text;\n\tconst chatId = message.chat.id;\n\n\tif (text === '/start') {\n\t\tawait sendTelegram('sendMessage', env.BOT_TOKEN, {\n\t\t\tchat_id: chatId,\n\t\t\ttext: 'Welcome to Willow Coffee! Click below to open the app.',\n\t\t\treply_markup: {\n\t\t\t\tinline_keyboard: [[{ text: '\u2615 Open App', web_app: { url: env.WEBAPP_URL } }]],\n\t\t\t},\n\t\t});\n\t} else if (text === '/mycard') {\n\t\tconst user = await env.DB.prepare('SELECT card_number FROM users WHERE telegram_id = ?').bind(chatId).first();\n\t\tconst cardText = user ? `Your loyalty card number is: ${user.card_number}` : 'You don\\'t have a card yet. Open the app to get one!';\n\t\tawait sendTelegram('sendMessage', env.BOT_TOKEN, { chat_id: chatId, text: cardText });\n\t}\n}\n\nasync function handleChannelPost(post, env) {\n\tif (post.chat.id.toString() !== env.ADMIN_CHANNEL_ID.toString()) return;\n\n\tconst text = post.text;\n\tif (!text) return;\n\n\tconst [command, id, value] = text.split(' ');\n\tif (!['/addamount', '/addstars'].includes(command) || !id || !value) return;\n\n\tconst by = id.startsWith('@') ? 'username' : 'card';\n\tconst identifier = id.startsWith('@') ? id.substring(1) : parseInt(id, 10);\n\n\tconst accruePayload = { by, id: identifier };\n\tif (command === '/addamount') {\n\t\taccruePayload.amount = parseInt(value, 10);\n\t} else {\n\t\taccruePayload.stars = parseInt(value, 10);\n\t}\n\n\t// Mock a request to our own admin endpoint\n\tconst request = new Request(`https://worker.local/api/admin/accrue`, {\n\t\tmethod: 'POST',\n\t\theaders: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${env.ADMIN_BEARER}` },\n\t\tbody: JSON.stringify(accruePayload),\n\t});\n\n\tconst response = await handleAdminAccrue(request, env);\n\tconst result = await response.json();\n\n\tlet replyText;\n\tif (response.ok) {\n\t\treplyText = `\u2705 Success! User @${result.user.username} (Card: ${result.user.card_number}) now has ${result.user.stars} stars.`;\n\t} else {\n\t\treplyText = `\u274C Error: ${result.error}`;\n\t}\n\tawait sendTelegram('sendMessage', env.BOT_TOKEN, { chat_id: post.chat.id, text: replyText, reply_to_message_id: post.message_id });\n}\n\nasync function handleCallbackQuery(callbackQuery, env) {\n\tconst [action, type, id] = callbackQuery.data.split(':');\n\tif (action !== 'order') return;\n\n\tconst order = await env.DB.prepare('SELECT * FROM orders WHERE id = ?').bind(id).first();\n\tif (!order) {\n\t\tawait sendTelegram('answerCallbackQuery', env.BOT_TOKEN, { callback_query_id: callbackQuery.id, text: 'Order not found!' });\n\t\treturn;\n\t}\n\n\tlet newStatus, newDueAt, dmText, replyText;\n\n\tswitch (type) {\n\t\tcase 'ready':\n\t\t\tnewStatus = 'ready';\n\t\t\tawait env.DB.prepare('UPDATE orders SET status = ? WHERE id = ?').bind(newStatus, id).run();\n\t\t\treplyText = `\u2705 Order ${order.short_id} marked as Ready.`;\n\t\t\tdmText = {\n\t\t\t\ten: 'Your order is ready for pickup!',\n\t\t\t\tru: '\u0412\u0430\u0448 \u0437\u0430\u043A\u0430\u0437 \u0433\u043E\u0442\u043E\u0432 \u043A \u0432\u044B\u0434\u0430\u0447\u0435!',\n\t\t\t\tsr: 'Va\u0161a narud\u017Eba je spremna za preuzimanje!',\n\t\t\t};\n\t\t\tbreak;\n\n\t\tcase 'delay10':\n\t\t\tnewDueAt = new Date(new Date(order.due_at).getTime() + 10 * 60 * 1000).toISOString();\n\t\t\tawait env.DB.prepare('UPDATE orders SET due_at = ? WHERE id = ?').bind(newDueAt, id).run();\n\t\t\treplyText = `\u2795 Order ${order.short_id} delayed by 10 minutes. New ETA: ${new Date(newDueAt).toLocaleTimeString('en-GB')}`;\n\t\t\tbreak;\n\n\t\tcase 'cancel':\n\t\t\tnewStatus = 'canceled';\n\t\t\tawait env.DB.prepare('UPDATE orders SET status = ? WHERE id = ?').bind(newStatus, id).run();\n\t\t\treplyText = `\u26D4\uFE0F Order ${order.short_id} has been canceled.`;\n\t\t\tdmText = {\n\t\t\t\ten: 'Unfortunately, your order has been canceled.',\n\t\t\t\tru: '\u041A \u0441\u043E\u0436\u0430\u043B\u0435\u043D\u0438\u044E, \u0432\u0430\u0448 \u0437\u0430\u043A\u0430\u0437 \u0431\u044B\u043B \u043E\u0442\u043C\u0435\u043D\u0435\u043D.',\n\t\t\t\tsr: 'Na\u017Ealost, va\u0161a narud\u017Eba je otkazana.',\n\t\t\t};\n\t\t\tbreak;\n\t}\n\n\t// Send DM to customer if needed\n\tif (dmText) {\n\t\tconst user = await env.DB.prepare('SELECT language_code FROM users WHERE telegram_id = ?').bind(order.user_id).first();\n\t\tconst lang = user.language_code && dmText[user.language_code] ? user.language_code : 'en';\n\t\tawait sendTelegram('sendMessage', env.BOT_TOKEN, { chat_id: order.user_id, text: dmText[lang] });\n\t}\n\n\t// Update the original message card\n\tconst updatedOrder = await env.DB.prepare('SELECT * FROM orders WHERE id = ?').bind(id).first();\n\tconst card = await buildOrderCard(env, updatedOrder);\n\tawait sendTelegram('editMessageText', env.BOT_TOKEN, {\n\t\tchat_id: callbackQuery.message.chat.id,\n\t\tmessage_id: callbackQuery.message.message_id,\n\t\ttext: card.text,\n\t\treply_markup: card.reply_markup,\n\t\tparse_mode: 'Markdown',\n\t});\n\n\tawait sendTelegram('answerCallbackQuery', env.BOT_TOKEN, { callback_query_id: callbackQuery.id, text: replyText });\n}\n\n// =================================================================================\n// Cron Job (Scheduled)\n// =================================================================================\n\nasync function handleScheduled(event, env, ctx) {\n\tconst now = new Date().toISOString();\n\tconst { results } = await env.DB.prepare(\n\t\t\"SELECT * FROM orders WHERE status = 'pending' AND due_at <= ? AND notified = FALSE\"\n\t).bind(now).all();\n\n\tif (results && results.length > 0) {\n\t\tfor (const order of results) {\n\t\t\tawait env.DB.prepare(\"UPDATE orders SET status = 'overdue', notified = TRUE WHERE id = ?\").bind(order.id).run();\n\n\t\t\tconst comment = `\u2757\uFE0F Overdue: Order #${order.short_id} was due at ${new Date(order.due_at).toLocaleTimeString('en-GB')}.`;\n\t\t\t\n\t\t\t// Find the original message to reply to. This is a bit tricky without storing message_id.\n\t\t\t// For now, we just post a new message to the channel.\n\t\t\t// A better implementation would store the admin channel message_id with the order.\n\t\t\tawait sendTelegram('sendMessage', env.BOT_TOKEN, {\n\t\t\t\tchat_id: env.ADMIN_CHANNEL_ID,\n\t\t\t\ttext: comment,\n\t\t\t});\n\t\t}\n\t}\n}\n\n\n// =================================================================================\n// Utility & Helper Functions\n// =================================================================================\n\n/**\n * Parses CSV text from Google Sheets into a structured menu object.\n */\nfunction parseMenuFromCsv(csvText) {\n\tconst rows = csvText.split('\\n').map(r => r.trim()).filter(Boolean);\n\tconst headers = rows.shift().split(',').map(h => h.trim().toLowerCase());\n\t\n\tconst items = rows.map(row => {\n\t\tconst values = row.split(',').map(v => v.trim());\n\t\tconst itemData = headers.reduce((obj, header, index) => {\n\t\t\tobj[header] = values[index];\n\t\t\treturn obj;\n\t\t}, {});\n\n\t\tconst title_en = itemData['\u0430\u043D\u0433\u043B\u0438\u0439\u0441\u043A\u0438\u0439'];\n\t\tconst category = itemData['\u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044F'];\n\t\tconst volume = itemData['\u043E\u0431\u044A\u0435\u043C'];\n\n\t\treturn {\n\t\t\tid: simpleHash(category + '|' + title_en + '|' + volume),\n\t\t\tcategory: category,\n\t\t\ttitle: {\n\t\t\t\ten: title_en,\n\t\t\t\tru: itemData['\u0440\u0443\u0441\u0441\u043A\u0438\u0439'],\n\t\t\t\tsr: itemData['\u0441\u0435\u0440\u0431\u0441\u043A\u0438\u0439'],\n\t\t\t},\n\t\t\tvolume: volume,\n\t\t\tprice: parseInt(itemData['\u0441\u0442\u043E\u0438\u043C\u043E\u0441\u0442\u044C (rsd)'], 10) || 0,\n\t\t\tingredients: itemData['\u0441\u043E\u0441\u0442\u0430\u0432'],\n\t\t};\n\t});\n\n\tconst categories = [...new Set(items.map(item => item.category))];\n\n\treturn {\n\t\tupdated_at: new Date().toISOString(),\n\t\tcategories,\n\t\titems,\n\t};\n}\n\n/**\n * Calculates the total order amount based on server-side menu prices.\n */\nfunction calculateOrderTotal(orderItems, menuItems) {\n\tlet total_amount = 0;\n\tconst validatedItems = [];\n\tconst menuMap = new Map(menuItems.map(i => [i.id, i]));\n\n\tfor (const item of orderItems) {\n\t\tconst menuItem = menuMap.get(item.id);\n\t\tif (menuItem && item.qty > 0) {\n\t\t\ttotal_amount += menuItem.price * item.qty;\n\t\t\tvalidatedItems.push({\n\t\t\t\tid: item.id,\n\t\t\t\tquantity: item.qty,\n\t\t\t\tunit_price: menuItem.price,\n\t\t\t});\n\t\t}\n\t}\n\treturn { total_amount, validatedItems };\n}\n\n/**\n * Generates a unique 4-digit card number.\n */\nasync function generateUniqueCardNumber(db) {\n\twhile (true) {\n\t\tconst card_number = Math.floor(1000 + Math.random() * 9000);\n\t\tconst existing = await db.prepare('SELECT 1 FROM users WHERE card_number = ?').bind(card_number).first();\n\t\tif (!existing) {\n\t\t\treturn card_number;\n\t\t}\n\t}\n}\n\n/**\n * Validates the initData string from Telegram.\n */\nasync function isValidTelegramInitData(initData, botToken) {\n\tconst params = new URLSearchParams(initData);\n\tconst hash = params.get('hash');\n\tparams.delete('hash');\n\n\tconst dataCheckString = Array.from(params.entries())\n\t\t.sort(([a], [b]) => a.localeCompare(b))\n\t\t.map(([key, value]) => `${key}=${value}`)\n\t\t.join('\\n');\n\n\tconst cryptoKey = await crypto.subtle.importKey(\n\t\t'raw',\n\t\tawait crypto.subtle.digest('SHA-256', new TextEncoder().encode('WebAppData')),\n\t\t{ name: 'HMAC', hash: 'SHA-256' },\n\t\tfalse,\n\t\t['sign']\n\t);\n\tconst secretKey = await crypto.subtle.sign('HMAC', cryptoKey, new TextEncoder().encode(botToken));\n\n\tconst signatureKey = await crypto.subtle.importKey('raw', secretKey, { name: 'HMAC', hash: 'SHA-256' }, false, ['sign']);\n\tconst signature = await crypto.subtle.sign('HMAC', signatureKey, new TextEncoder().encode(dataCheckString));\n\n\tconst hex = [...new Uint8Array(signature)].map(b => b.toString(16).padStart(2, '0')).join('');\n\treturn hash === hex;\n}\n\n/**\n * Sends a request to the Telegram Bot API.\n */\nasync function sendTelegram(method, token, body) {\n\treturn fetch(`https://api.telegram.org/bot${token}/${method}`, {\n\t\tmethod: 'POST',\n\t\theaders: { 'Content-Type': 'application/json' },\n\t\tbody: JSON.stringify(body),\n\t});\n}\n\n/**\n * Builds the text and keyboard for an order notification card.\n */\nasync function buildOrderCard(env, order) {\n    const user = await env.DB.prepare('SELECT * FROM users WHERE telegram_id = ?').bind(order.user_id).first();\n    const { results: orderItems } = await env.DB.prepare('SELECT * FROM order_items WHERE order_id = ?').bind(order.id).all();\n\n    await handleGetMenu(new Request('http://local.dev/api/menu'), env); // Ensure menu is cached\n    const menuMap = new Map(menuCache.data.items.map(i => [i.id, i]));\n\n    let itemsText = orderItems.map(item => {\n        const menuItem = menuMap.get(item.item_id);\n        const title = menuItem ? menuItem.title.en : 'Unknown Item';\n        return `- ${title} \u00D7${item.quantity} \u2014 ${item.unit_price * item.quantity} RSD`;\n    }).join('\\n');\n\n    let statusText = `Status: ${order.status.toUpperCase()}`;\n    if (order.status === 'pending' || order.status === 'overdue') {\n        statusText += ` (Due: ${new Date(order.due_at).toLocaleTimeString('en-GB')})`;\n    }\n\n    const text = `\n#Order ${order.short_id} \u00B7 ETA ${order.eta_minutes} min\n*Client*: @${user.username} (ID: ${user.telegram_id}, Card: ${user.card_number})\n*Items*:\n${itemsText}\n*Total*: ${order.total_amount} RSD \u2192 +${order.stars_added}\u2B50\n---\n${statusText}\n    `.trim();\n\n    let inline_keyboard = [];\n    if (order.status === 'pending' || order.status === 'overdue') {\n        inline_keyboard.push([\n            { text: '\u2705 Mark as Ready', callback_data: `order:ready:${order.id}` },\n            { text: '\u2795 Add 10 min', callback_data: `order:delay10:${order.id}` },\n            { text: '\u26D4\uFE0F Cancel Order', callback_data: `order:cancel:${order.id}` },\n        ]);\n    }\n\n    return { text, reply_markup: { inline_keyboard } };\n}\n\n\n/**\n * Posts the initial order card to the admin channel.\n */\nasync function notifyAdminChannel(env, orderData) {\n\tconst order = {\n\t\tid: orderData.order_id,\n\t\tshort_id: orderData.short_id,\n\t\tuser_id: orderData.user.id,\n\t\ttotal_amount: orderData.total_amount,\n\t\tstars_added: orderData.stars_added,\n\t\teta_minutes: orderData.eta_minutes,\n\t\tdue_at: orderData.due_at,\n\t\tstatus: 'pending',\n\t};\n\tconst card = await buildOrderCard(env, order);\n\n\tawait sendTelegram('sendMessage', env.BOT_TOKEN, {\n\t\tchat_id: env.ADMIN_CHANNEL_ID,\n\t\ttext: card.text,\n\t\treply_markup: card.reply_markup,\n\t\tparse_mode: 'Markdown',\n\t});\n}\n\n/**\n * Creates a simple, non-crypto hash for menu item IDs.\n */\nfunction simpleHash(str) {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        const char = str.charCodeAt(i);\n        hash = (hash << 5) - hash + char;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return 'item-' + Math.abs(hash).toString(16);\n}\n\n/**\n * Returns a JSON response with appropriate headers.\n */\nfunction jsonResponse(data, headers = {}) {\n\tconst corsHeaders = {\n\t\t'Access-Control-Allow-Origin': CORS_ORIGIN,\n\t\t'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n\t\t'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n\t};\n\treturn new Response(JSON.stringify(data), {\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...corsHeaders,\n\t\t\t...headers,\n\t\t},\n\t});\n}\n\n/**\n * Handles preflight OPTIONS requests for CORS.\n */\nfunction handleOptions(request) {\n    if (\n        request.headers.get(\"Origin\") !== null &&\n        request.headers.get(\"Access-Control-Request-Method\") !== null &&\n        request.headers.get(\"Access-Control-Request-Headers\") !== null\n    ) {\n        // Handle CORS preflight requests.\n        return new Response(null, {\n            headers: {\n                \"Access-Control-Allow-Origin\": CORS_ORIGIN,\n                \"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS\",\n                \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\n            },\n        });\n    } else {\n        // Handle standard OPTIONS request.\n        return new Response(null, {\n            headers: {\n                \"Allow\": \"GET, POST, OPTIONS\",\n            },\n        });\n    }\n}\n\n\n// =================================================================================\n// Main Worker Entrypoint\n// =================================================================================\n\nconst router = new Router()\n\t.add('GET', '/api/menu', handleGetMenu)\n\t.add('POST', '/api/auth/telegram', handleAuth)\n\t.add('POST', '/api/order', handleCreateOrder)\n    .add('POST', '/api/redeem', handleRedeem)\n\t.add('POST', '/api/admin/accrue', handleAdminAccrue)\n\t.add('POST', '/tg/webhook', handleWebhook);\n\nexport default {\n\tasync fetch(request, env, ctx) {\n        if (request.method === 'OPTIONS') {\n            return handleOptions(request);\n        }\n\t\ttry {\n\t\t\treturn await router.route(request, env, ctx);\n\t\t} catch (e) {\n\t\t\treturn jsonResponse({ error: e.message }, { status: 500 });\n\t\t}\n\t},\n\tasync scheduled(event, env, ctx) {\n\t\tctx.waitUntil(handleScheduled(event, env, ctx));\n\t},\n};", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/bari/Documents/GitHub/Willow Bot/worker/src/worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/opt/homebrew/Cellar/node@22/22.11.0/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/opt/homebrew/Cellar/node@22/22.11.0/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/bari/Documents/GitHub/Willow Bot/worker/src/worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/bari/Documents/GitHub/Willow Bot/worker/.wrangler/tmp/bundle-xbbWlV/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/opt/homebrew/Cellar/node@22/22.11.0/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/bari/Documents/GitHub/Willow Bot/worker/.wrangler/tmp/bundle-xbbWlV/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/bari/Documents/GitHub/Willow Bot/worker/.wrangler/tmp/bundle-xbbWlV/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
